package labuladong.NQueens51;

import java.util.ArrayList;
import java.util.List;

/**
 * The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
 *
 * Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.
 *
 * Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.
 */
public class Solution {
	List<List<String>> result = new ArrayList<>();
	List<String> path = new ArrayList<>();
	List<Integer> indexList = new ArrayList<>(); // Index of queens generated by rows that have been traversed
	public List<List<String>> solveNQueens(int n) {
		backTrace(n,0);
		return result;
	}

	public void backTrace(int n, int line){
		if(line == n){
			// already traversed the last row
			result.add(new ArrayList<>(path));
			return;
		}

		// check in this line, which index is available for putting Q
		boolean[] check = new boolean[n];
		for(int i = 0;i<indexList.size();i++){
			int index = indexList.get(i);
			check[index] = true;
			if(index + (line-i) < n){
				check[index + (line-i)] = true;
			}

			if(index - (line-i) >= 0){
				check[index - (line-i)] = true;
			}
		}

		for(int i = 0;i < n;i++){
			if(!check[i]){
				indexList.add(i);
				path.add(buildLine(i,n));
				backTrace(n,line+1);
				path.remove(path.size()-1);
				indexList.remove(indexList.size()-1);
			}
		}
	}

	public String buildLine(int i, int n){
		StringBuilder sb = new StringBuilder();
		for(int k = 0;k<n;k++){
			if(k==i){
				sb.append('Q');
			} else {
				sb.append('.');
			}
		}
		return sb.toString();
	}
}
